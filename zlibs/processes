#!/usr/bin/env zsh

# func "load paths and execmaps"
# maps+=(execmap execrules)
# execmap=()
# source $R/db/execmap.zkv
# execrules=()
# source $R/db/execrules.zkv

# high-level launcher using execmap and sup when necessary
launch() {
    fn launch $*
    local _cmd="$1"
    func "command: $_cmd"
    local _path=${execmap[$_cmd]}
    req=(_cmd _path)
    _freq=($_path)
    ckreq || return $?

    local _ret
    _rule=$execrules[$_cmd]
    case $_rule in
        user)
            shift 1
            func "user launch: $_path $*"
            $_path $*
            _ret=$?
            func "$_cmd (user) returns $_ret"
            return $_ret
            ;;
        root)
            shift 1
            func "root launch: $_path $*"
            $R/bin/sup $_path $*
            _ret=$?
            func "$_cmd (root) returns $_ret"
            return $_ret
            ;;
        *)
            error "unknown execrule for $_cmd to launch: $_rule"
            return 1
            ;;
    esac
}


# high-level daemon starter, synopsis:
#
# start daemon-name [ pidfile configfile ]
#
start() {
    fn start $*
    _daemon="$1"

    shift

    req=(_daemon)
    ckreq || return $?

	args="$*"


    command -v ${_daemon}-exec > /dev/null || {
		warning "${_daemon}-exec : daemon not found"
		return 1 }

    _pid=`getpid $_daemon`
    [[ "$_pid" = "" ]] || {
		if [[ -r /proc/${_pid}/stat ]]; then
			warning "$_daemon already running (pid $_pid)"
			return 0
		else
			warning "$_daemon crashed, overwriting old pid"
		fi
	}

    act "generating configuration for $_daemon"
    conf=$H/run/$_daemon.conf
    ${_daemon}-conf > $conf

    act "starting daemon: $_daemon $*"

    # we preload jemalloc for better memory handling
    # need to detect the path for it
    case `uname -m` in
        x86_64)
            func "set LD_PRELOAD for jemalloc arch x84_64 ($_daemon)"
            LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.1 \
                      ${_daemon}-exec $args
            ;;

        i686)
            func "set LD_PRELOAD for jemalloc arch i686 ($_daemon)"
            LD_PRELOAD=/usr/lib/i386-linux-gnu/libjemalloc.so.1 \
                      ${_daemon}-exec $args
            ;;

        *) ${_daemon}-exec $args ;;

    esac

    func "${_daemon}-exec $args"
    return $?
}

stop() {
    fn stop $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    _pid=`getpid $_daemon`

    if [[ "$_pid" = "" ]]; then
		warning "$_daemon is not running"
        return 1
    else
        act "stopping $_daemon ($_pid)"
        if command -v ${_daemon}-kill > /dev/null; then
            ${_daemon}-kill
        else
            killpid $_pid
            waitpid $_pid || {
                error "$_daemon: could not stop pid $_pid"
                return 1 }
        fi
        rm -f $H/run/${_daemon}.pid
    fi
    # TODO: kill -9
    return 0
}

savepid() {
    fn savepid $*

    local _daemon="$1"
    local _pid="$2"
    req=(_daemon)
    ckreq || return $?

	freq=($_pid)
	for c in {1..10}; do
		ckreq 2>/dev/null && break
		sleep 1
	done
	[[ -r $_pid ]] && _pidnum=`cat $_pid`

	[[ "$_pidnum" = "" ]] && {
		error "$_daemon did not write pid in $_pid"
		return 1
	}

    # print "SET daemon-${_daemon}-pid \"$_pidnum\"" \
    #         | redis runtime > /dev/null
	# TODO: check redis result is OK?
	return 0
}

getpid() {
    fn getpid $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    unset _pid

	_pidfile=$H/run/$_daemon.pid
	func "checking pidfile: $_pidfile"
	_pid=`cat $_pidfile 2>/dev/null`

    if [[ "$_pid" = "" ]]; then
        func "$_daemon: pid not found"
        return 1
    else
        func "$_daemon pid found: $_pid"
    fi

    print $_pid
    return 0
}

killpid() {
    fn killpid $*
    _pid="$1"
    req=(_pid)
    ckreq || return $?


    ps -p $_pid > /dev/null || {
        warning "pid not running: $_pid"
        return 0 }

    func "killing $_daemon pid($_pid)"
    if [[ "$execrules[$_daemon]" = "root" ]]; then
        func "root daemon, using sup to kill"
        $R/bin/sup kill $_pid
    else
        kill $_pid
    fi

}

waitpid() {
    fn waitpid $*
    _pid="$1"
    _timeout=${2:-60}
    req=(_pid)
    ckreq || return $?

    local lastnewline=0
    for c in {1..$_timeout}; do
        # here check if pid its running	   
        if [[ -r /proc/$_pid/stat ]]; then
            print -n . ; lastnewline=1
            sleep 1
        else
            break
        fi
        # TODO: timeout with kill -9
    done
    # this because we care to look good on the console
    [[ $lastnewline = 1 ]] && print

    [[ $c = $_timeout ]] && {
        warning "operation timed out, pid($_pid) still running."
        return 1 }

    return 0
}

# prints a unique identifier of the lock used to unlock in case of success
# else returns nonzero in case of failure (lock timeout)
lock() {
	fn lock $*
	_lid="$1"
	timeout=${2:-10}
	req=(_lid)
	ckreq || return $?

	local lkey
	lkey=`launch hiredis-lock on ${_lid} "${timeout}000"`
	print "$lkey"
	if [[ "$lkey" = "0" ]]; then
		return 1
	else
		return 0
	fi
}

unlock() {
	fn unlock $*
	_lid="$1"
	rand="$2"
	req=(_lid rand)
	ckreq || return $?

	launch hiredis-lock off ${_lid} ${rand}
	return $?
}

